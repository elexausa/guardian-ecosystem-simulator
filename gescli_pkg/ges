#!/usr/bin/env python
#
# Copyright (C) 2019 Elexa Consumer Product, Inc.
#
# This file is part of the Guardian Device Simulator
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import click
import logging
import json
import ges
from enum import Enum

# Utilities
from util import config_helper

# Load command groups
from commands.config import config
from commands.data import data
from commands.list import list
from commands.runner import runner
from commands.spawn import spawn

###################
## Configuration ##
###################

# Logging
LOG_FILE = 'history.log'

logging.basicConfig(
    level=logging.DEBUG,
    format='[%(levelname)s,%(asctime)s,%(process)d,%(threadName)s](%(filename)s/%(funcName)s): %(message)s',
    handlers=[
        logging.FileHandler(filename=LOG_FILE),
        # logging.StreamHandler()
    ]
)


#########################
## Main command groups ##
#########################

@click.group()
@click.version_option(version=config_helper.version, prog_name='Guardian Ecosystem Simulator CLI')
def cli():
    """Guardian Ecosystem Simulator CLI

    This command line interface provides control of the Guardian
    Ecosystem Simulator (GES) daemon. The daemon must be started
    and accessible over the local network.
    """
    pass

###############################################
## Register commands with main command group ##
###############################################

cli.add_command(data)
cli.add_command(list)
cli.add_command(runner)
cli.add_command(spawn)
cli.add_command(config)

# Run CLI
if __name__ == '__main__':
    config_helper.load()
    cli()
